(function(){var n;n=function(n,t){return $("body").append("<div id='"+n+"' class='tagger'><\/div>"),$("#"+n).tags(t)};describe("Bootstrap Tags",function(){return afterEach(function(){return $(".tagger").remove()}),it("defaults to bootstrap 3",function(){var t;return t=n("tagger2"),expect(t.bootstrapVersion).toEqual("3")}),describe("when templating",function(){return it("uses appropriate version",function(){var t,i,r;return t=n("tagger2",{bootstrapVersion:"2"}),i=t.template("input",{tagSize:"sm"}),r=Tags.Templates["2"].input({tagSize:"sm"}),expect(i).toEqual(r)}),it("defaults to shared when template by name is not available in a version",function(){var t,i,r;return t=n("tagger2",{bootstrapVersion:"2"}),i=t.template("suggestion_list"),r=Tags.Templates.shared.suggestion_list(),expect(i).toEqual(r)})}),describe("when using readOnly",function(){return beforeEach(function(){return this.initTagData=["one","two","three"],this.tags=n("tagger",{tagData:this.initTagData,readOnly:!0})}),it("can't add tags",function(){var n;return n=this.tags.getTags().length,this.tags.addTag("new tag"),expect(this.tags.getTags().length).toEqual(n)}),it("can't remove tags",function(){var n;return n=this.tags.getTags().length,this.tags.removeTag("one"),expect(this.tags.hasTag("one")).toBeTruthy()}),it("can't rename tag",function(){return this.tags.renameTag("one","new name"),expect(this.tags.hasTag("new name")).toBeFalsy(),expect(this.tags.hasTag("one")).toBeTruthy()}),it("can get the list of tags",function(){return expect(this.tags.getTags()).toEqual(this.initTagData)}),describe("when no tags are provided",function(){return it("sets readOnlyEmptyMessage to tags body if provided",function(){return this.tags=n("tagger2",{readOnly:!0,readOnlyEmptyMessage:"foo"}),expect($("#tagger2 .tags",this.$domElement).html()).toEqual("foo")}),it("sets default empty message to tags body if readOnlyEmptyMessage is not provided",function(){return this.tags=n("tagger2",{readOnly:!0}),expect($("#tagger2 .tags").html()).toEqual($("#tagger2").tags().readOnlyEmptyMessage)})})}),describe("when the enter key is pressed before any text is entered",function(){return beforeEach(function(){return this.tags=n("tagger2",{}),$("#tagger2 .tags-input").trigger($.Event("keydown",{which:13}))}),it("does not add any tags",function(){return expect(this.tags.getTags()).toEqual([])})}),describe("when normally operating",function(){return beforeEach(function(){return this.initTagData=["one","two","three"],this.tags=n("tagger",{tagData:this.initTagData})}),it("can add tag",function(){var n;return n=this.tags.getTags().length,this.tags.addTag("new tag"),expect(this.tags.getTags().length).toEqual(n+1),expect(this.tags.hasTag("new tag")).toBeTruthy()}),it("can get the list of tags",function(){return expect(this.tags.getTags()).toEqual(this.initTagData)}),it("can remove tag, specified by string",function(){return expect(this.tags.hasTag("one")).toBeTruthy(),this.tags.removeTag("one"),expect(this.tags.hasTag("one")).toBeFalsy()}),it("can remove the last tag",function(){var t,n;return n=this.tags.getTags(),t=n[n.length-1],this.tags.removeLastTag(),expect(this.tags.hasTag(t)).toBeFalsy()}),it("can add tag with popover content",function(){var n;return this.tags.addTagWithContent("new tag","new content"),n=this.tags.getTagsWithContent(),expect(n[n.length-1].content).toEqual("new content")}),it("can change the popover content for a tag",function(){var n;return n="new tag content for the first tag",this.tags.setPopover("one",n),expect(this.tags.getTagWithContent("one").content).toEqual(n)}),it("can rename tag",function(){return this.tags.renameTag("one","new name"),expect(this.tags.hasTag("new name")).toBeTruthy(),expect(this.tags.hasTag("one")).toBeFalsy()}),it("can getTagWithContent",function(){return this.tags.addTagWithContent("new tag","new content"),expect(this.tags.getTagWithContent("new tag").content).toEqual("new content")}),describe("when defining popover for an existing tag",function(){return it("should set the associated content",function(){var t;return t=n("tagger2",{definePopover:function(n){return"popover for "+n}}),t.addTag("foo"),expect(t.getTagWithContent("foo").content).toEqual("popover for foo")})}),describe("when provided a promptText option",function(){return it("applies it to the input placeholder when there are no tags",function(){var t;return t=n("tagger2",{promptText:"foo"}),expect($("#tagger2 input").attr("placeholder")).toEqual("foo")}),it("does not apply it to input placeholder when there are tags",function(){var t;return t=n("tagger2",{promptText:"foo",tagData:["one"]}),expect($("#tagger2 input").attr("placeholder")).toEqual("")})}),describe("when provided with a tagClass option",function(){return it("uses it to style tags",function(){return this.tags=n("tagger2",{tagClass:"btn-warning",tagData:["a","b"]}),expect($("#tagger2 .tag").hasClass("btn-warning")).toBeTruthy()})}),describe("when provided a tagSize option",function(){return it("defaults to md",function(){var t;return t=n("tagger2",{}),expect(t.tagSize).toEqual("md")}),it("applies it to tags",function(){var t;return t=n("tagger2",{tagSize:"sm",tagData:["one","two"]}),expect($("#tagger2 .tag").hasClass("sm")).toBeTruthy()}),it("applies it to input",function(){var t;return t=n("tagger2",{tagSize:"lg"}),expect($("#tagger2 input").hasClass("input-lg")).toBeTruthy()})}),describe("when provided a maxNumTags option",function(){return it("cannot add more tags than maxNumTags",function(){var t;return t=n("tagger2",{maxNumTags:3,tagData:["one","two","three"]}),expect(t.addTag("four").getTags()).toEqual(["one","two","three"])}),it("can add tags when numTags is less than maxNumTags",function(){var t;return t=n("tagger2",{maxNumTags:3,tagData:["one","two"]}),expect(t.addTag("three").getTags()).toEqual(["one","two","three"])}),it("defaults to allow multiple tags",function(){var t;return t=n("tagger2",{tagData:["one","two","three","four","five"]}),expect(t.addTag("six").getTags()).toEqual(["one","two","three","four","five","six"])})}),describe("when providing before/after adding/deleting callbacks",function(){return describe("when adding tags",function(){return it("calls beforeAddingTag before a tag is added, providing the tag as first parameter",function(){var t,r,i;return i=!1,t="not this",r=n("tagger2",{beforeAddingTag:function(n){return i=!0,t=n}}),r.addTag("this"),expect(i&&t==="this").toBeTruthy()}),it("will not add a tag if beforeAddingTag returns false",function(){var t;return t=n("tagger2",{beforeAddingTag:function(){return!1}}),t.addTag("this"),expect(t.getTags()).toEqual([])}),it("calls afterAddingTag after a tag is added, providing the tag as first parameter",function(){var t,r,i;return i=!1,t="not this",r=n("tagger2",{afterAddingTag:function(n){return i=!0,t=n}}),r.addTag("this"),expect(i&&t==="this").toBeTruthy()})}),describe("when deleting tags",function(){return it("calls beforeDeletingTag before a tag is removed, providing the tag as first parameter",function(){var i,t;return t=!1,i=n("tagger2",{tagData:["a","b","c"],beforeDeletingTag:function(n){return t=!0,expect(n).toEqual("a")}}),i.removeTag("a"),expect(t).toBeTruthy()}),it("will not add a tag if beforeDeletingTag returns false",function(){var t;return t=n("tagger2",{tagData:["a","b","c"],beforeDeletingTag:function(){return!1}}),t.removeTag("a"),expect(t.getTags()).toEqual(["a","b","c"])}),it("calls afterDeletingTag after a tag is removed, providing the tag as first parameter",function(){var i,t;return t=!1,i=n("tagger2",{tagData:["a","b","c"],afterDeletingTag:function(n){return t=!0,expect(n).toEqual("a")}}),i.removeTag("a"),expect(t).toBeTruthy()})})}),describe("when restricting tags using restrictTo option",function(){return it("will not add any tags that aren't approved",function(){var t;return t=n("tagger2",{restrictTo:["a","b","c"]}),t.addTag("foo").addTag("bar").addTag("baz").addTag("a"),expect(t.getTags()).toEqual(["a"]),$("#tagger2").remove()})}),describe("when providing exclusion options",function(){return it("can exclude tags via the excludes function option",function(){var i,t;return i=function(n){return n.indexOf("foo")>-1?!1:!0},t=n("tagger2",{excludes:i}),t.addTag("foo").addTag("bar").addTag("baz").addTag("foobarbaz"),expect(t.getTags()).toEqual(["foo","foobarbaz"]),$("#tagger2").remove()}),it("can exclude tags via the exclude option",function(){var t;return t=n("tagger2",{exclude:["a","b","c"]}),t.addTag("a").addTag("b").addTag("c").addTag("d"),expect(t.getTags()).toEqual(["d"]),$("#tagger2").remove()})}),describe("when auto-suggesting",function(){return describe("and caseInsensitive is true",function(){return describe("and tags are uppercase",function(){return it("should find suggestions for lowercase input",function(){var t;return t=n("tagger2",{caseInsensitive:!0,suggestions:["Alpha","Bravo","Charlie"]}),expect(t.getSuggestions("a",!0)).toEqual(["Alpha"])}),it("should find suggestions for uppercase input",function(){var t;return t=n("tagger2",{caseInsensitive:!0,suggestions:["Alpha","Bravo","Charlie"]}),expect(t.getSuggestions("A",!0)).toEqual(["Alpha"])})}),describe("and tags are lowercase",function(){return it("should find suggestions for lowercase input",function(){var t;return t=n("tagger2",{caseInsensitive:!0,suggestions:["alpha","bravo","charlie"]}),expect(t.getSuggestions("a",!0)).toEqual(["alpha"])}),it("should find suggestions for uppercase input",function(){var t;return t=n("tagger2",{caseInsensitive:!0,suggestions:["alpha","bravo","charlie"]}),expect(t.getSuggestions("A",!0)).toEqual(["alpha"])})})}),describe("and caseInsensitive is false",function(){return describe("and tags are uppercase",function(){return it("should not find suggestions for lowercase input",function(){var t;return t=n("tagger2",{suggestions:["Alpha","Bravo","Charlie"]}),expect(t.getSuggestions("a",!0)).toEqual([])}),it("should find suggestions for uppercase input",function(){var t;return t=n("tagger2",{suggestions:["Alpha","Bravo","Charlie"]}),expect(t.getSuggestions("A",!0)).toEqual(["Alpha"])})}),describe("and tags are lowercase",function(){return it("should find suggestions for lowercase input",function(){var t;return t=n("tagger2",{suggestions:["alpha","bravo","charlie"]}),expect(t.getSuggestions("a",!0)).toEqual(["alpha"])}),it("should not find suggestions for uppercase input",function(){var t;return t=n("tagger2",{suggestions:["alpha","bravo","charlie"]}),expect(t.getSuggestions("A",!0)).toEqual([])})})})})})})}).call(this);
//# sourceMappingURL=bootstrap-tags-spec.min.js.map
